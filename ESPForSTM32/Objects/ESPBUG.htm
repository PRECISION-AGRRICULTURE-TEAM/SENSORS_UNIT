<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ESPBUG.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ESPBUG.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 23 07:23:26 2020
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APP_vidTask &rArr; APP_vidSendTask &rArr; ESP8266_Example &rArr; ESP8266_u8ConnectToHost &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[43]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">MemManage_Handler</a><BR>
 <LI><a href="#[b]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">BusFault_Handler</a><BR>
 <LI><a href="#[c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SysTick_Handler</a><BR>
 <LI><a href="#[23]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">APP_vidTask</a> from app.o(i.APP_vidTask) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">DHT11_Falling</a> from dht11.o(i.DHT11_Falling) referenced from dht11.o(i.DHT11_vidMainfunc)
 <LI><a href="#[3f]">DHT11_Rising</a> from dht11.o(i.DHT11_Rising) referenced from dht11.o(i.DHT11_vidMainfunc)
 <LI><a href="#[5]">DHT11_vidMainfunc</a> from dht11.o(i.DHT11_vidMainfunc) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">SCHEDULER_vidTask</a> from scheduler.o(i.SCHEDULER_vidTask) referenced from scheduler.o(i.SCHEDULER_vidInit)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from main.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[13]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3]">dummy</a> from gpio.o(i.dummy) referenced 32 times from gpio.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[90]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[92]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[93]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[94]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[95]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[96]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[97]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[98]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ae]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SCHEDULER_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[41]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_vidJoinNetwork
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidCloseConnection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8CheckStatues
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ba]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>ADC_u16GetData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADC_u16GetData))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_u16GetData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_u16GetData
</UL>

<P><STRONG><a name="[82]"></a>ADC_u8ConversionStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADC_u8ConversionStatus))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_u8ReadingStatus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_u8ReadingStatus
</UL>

<P><STRONG><a name="[83]"></a>ADC_vidInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADC_vidInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidInit
</UL>

<P><STRONG><a name="[84]"></a>ADC_vidSelect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADC_vidSelect))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidStartReading
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidStartReading
</UL>

<P><STRONG><a name="[85]"></a>ADC_vidStartConversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADC_vidStartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidStartReading
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidStartReading
</UL>

<P><STRONG><a name="[89]"></a>APP_vidInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app.o(i.APP_vidInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[4]"></a>APP_vidTask</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app.o(i.APP_vidTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APP_vidTask &rArr; APP_vidSendTask &rArr; ESP8266_Example &rArr; ESP8266_u8ConnectToHost &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidWaitTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTempTask
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidSendTask
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidMoistTask
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidInitTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidDHT11Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>DHT11_Falling</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Falling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Falling
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Get_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(i.DHT11_vidMainfunc)
</UL>
<P><STRONG><a name="[3f]"></a>DHT11_Rising</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Rising))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DHT11_Rising &rArr; GPIO_u8WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidDisableInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8WritePin
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8SetPinDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(i.DHT11_vidMainfunc)
</UL>
<P><STRONG><a name="[57]"></a>DHT11_u8GetHumid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dht11.o(i.DHT11_u8GetHumid))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidDHT11Task
</UL>

<P><STRONG><a name="[58]"></a>DHT11_u8GetTemp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dht11.o(i.DHT11_u8GetTemp))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidDHT11Task
</UL>

<P><STRONG><a name="[56]"></a>DHT11_u8ReadingStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dht11.o(i.DHT11_u8ReadingStatus))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidDHT11Task
</UL>

<P><STRONG><a name="[5b]"></a>DHT11_vidInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dht11.o(i.DHT11_vidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_vidInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidInitTask
</UL>

<P><STRONG><a name="[5]"></a>DHT11_vidMainfunc</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, dht11.o(i.DHT11_vidMainfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DHT11_vidMainfunc &rArr; GPIO_u8WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidSetCallback_Rising
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidSetCallback_Falling
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidEnableInt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidDisableInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8WritePin
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8SetPinDir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>DHT11_vidStartReading</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dht11.o(i.DHT11_vidStartReading))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidDHT11Task
</UL>

<P><STRONG><a name="[64]"></a>ESP8266_Example</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Example))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_Example &rArr; ESP8266_u8ConnectToHost &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_vidJoinNetwork
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidCloseConnection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8Reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8CheckStatues
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidSendTask
</UL>

<P><STRONG><a name="[73]"></a>ESP8266_u8CheckStatues</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, esp8266.o(i.ESP8266_u8CheckStatues))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266_u8CheckStatues &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[75]"></a>ESP8266_u8ConnectToHost</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, esp8266.o(i.ESP8266_u8ConnectToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ESP8266_u8ConnectToHost &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToString
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[79]"></a>ESP8266_u8Reset</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_u8Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP8266_u8Reset &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[76]"></a>ESP8266_u8SendGETDataToOpendConnection</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, esp8266.o(i.ESP8266_u8SendGETDataToOpendConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_u8SendGETDataToOpendConnection &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToString
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[78]"></a>ESP8266_vidCloseConnection</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_vidCloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ESP8266_vidCloseConnection &rArr; copyString
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[77]"></a>ESP8266_vidListen</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_vidListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vidSetRxArr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vidEndReciption
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_vidJoinNetwork
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8Reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8CheckStatues
</UL>

<P><STRONG><a name="[7b]"></a>ESP8266_vidSendCommand</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_vidSendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266_vidSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vidSetTxArr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_vidJoinNetwork
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidCloseConnection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8Reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8CheckStatues
</UL>

<P><STRONG><a name="[74]"></a>ESP_vidJoinNetwork</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, esp8266.o(i.ESP_vidJoinNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ESP_vidJoinNetwork &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
</UL>

<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO_u8SetPinDir</STRONG> (Thumb, 848 bytes, Stack size 12 bytes, gpio.o(i.GPIO_u8SetPinDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_u8SetPinDir
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rising
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_u8WritePin</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, gpio.o(i.GPIO_u8WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_u8WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rising
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_vidDisableInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.GPIO_vidDisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rising
</UL>

<P><STRONG><a name="[72]"></a>GPIO_vidEnableInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.GPIO_vidEnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_vidInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(i.GPIO_vidInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[70]"></a>GPIO_vidSetCallback_Falling</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GPIO_vidSetCallback_Falling))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
</UL>

<P><STRONG><a name="[71]"></a>GPIO_vidSetCallback_Rising</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GPIO_vidSetCallback_Rising))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidMainfunc
</UL>

<P><STRONG><a name="[60]"></a>MOISTURE_u16GetData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, moisture.o(i.MOISTURE_u16GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOISTURE_u16GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_u16GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidMoistTask
</UL>

<P><STRONG><a name="[5f]"></a>MOISTURE_u8ReadingStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, moisture.o(i.MOISTURE_u8ReadingStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOISTURE_u8ReadingStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_u8ConversionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidMoistTask
</UL>

<P><STRONG><a name="[5c]"></a>MOISTURE_vidInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, moisture.o(i.MOISTURE_vidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MOISTURE_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8SetPinDir
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidInitTask
</UL>

<P><STRONG><a name="[5e]"></a>MOISTURE_vidStartReading</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, moisture.o(i.MOISTURE_vidStartReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOISTURE_vidStartReading
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidStartConversion
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidMoistTask
</UL>

<P><STRONG><a name="[86]"></a>SCHEDULER_vidInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i.SCHEDULER_vidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCHEDULER_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_vidEnavble
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vidInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vidSetISRCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vidInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vidInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8SetPinDir
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>SCHEDULER_vidStart</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, scheduler.o(i.SCHEDULER_vidStart))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SOIL_TEMP_u16GetData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, soil_temp.o(i.SOIL_TEMP_u16GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOIL_TEMP_u16GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_u16GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTempTask
</UL>

<P><STRONG><a name="[68]"></a>SOIL_TEMP_u8ReadingStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, soil_temp.o(i.SOIL_TEMP_u8ReadingStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOIL_TEMP_u8ReadingStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_u8ConversionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTempTask
</UL>

<P><STRONG><a name="[5a]"></a>SOIL_TEMP_vidInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, soil_temp.o(i.SOIL_TEMP_vidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SOIL_TEMP_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_u8SetPinDir
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidInitTask
</UL>

<P><STRONG><a name="[67]"></a>SOIL_TEMP_vidStartReading</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, soil_temp.o(i.SOIL_TEMP_vidStartReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOIL_TEMP_vidStartReading
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidStartConversion
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vidSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTempTask
</UL>

<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIMER_Get_us</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIMER_Get_us))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Falling
</UL>

<P><STRONG><a name="[6b]"></a>TIMER_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TIMER_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rising
</UL>

<P><STRONG><a name="[8b]"></a>TIMER_vidInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, timer.o(i.TIMER_vidInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[8a]"></a>TIMER_vidSetISRCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TIMER_vidSetISRCallback))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[7f]"></a>UART_vidEndReciption</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(i.UART_vidEndReciption))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>

<P><STRONG><a name="[87]"></a>UART_vidInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.UART_vidInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[7e]"></a>UART_vidSetRxArr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uart.o(i.UART_vidSetRxArr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_vidSetRxArr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidListen
</UL>

<P><STRONG><a name="[80]"></a>UART_vidSetTxArr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, uart.o(i.UART_vidSetTxArr))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidSendCommand
</UL>

<P><STRONG><a name="[36]"></a>USART1_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, uart.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USART1_vidEnavble</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.USART1_vidEnavble))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>

<P><STRONG><a name="[7c]"></a>copyString</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, esp8266.o(i.copyString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copyString
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_vidJoinNetwork
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_vidCloseConnection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8Reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
</UL>

<P><STRONG><a name="[7d]"></a>intToString</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, esp8266.o(i.intToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = intToString
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8SendGETDataToOpendConnection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_u8ConnectToHost
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = main &rArr; SCHEDULER_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidStart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHEDULER_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>setSensorData</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, esp8266.o(i.setSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setSensorData &rArr; copyString
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyString
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidSendTask
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[54]"></a>APP_vidDHT11Task</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app.o(i.APP_vidDHT11Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_vidDHT11Task
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidStartReading
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_u8ReadingStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_u8GetTemp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_u8GetHumid
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[59]"></a>APP_vidInitTask</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app.o(i.APP_vidInitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_vidInitTask &rArr; SOIL_TEMP_vidInit &rArr; GPIO_u8SetPinDir
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_vidInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[5d]"></a>APP_vidMoistTask</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app.o(i.APP_vidMoistTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_vidMoistTask &rArr; MOISTURE_vidStartReading
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_vidStartReading
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_u8ReadingStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOISTURE_u16GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[61]"></a>APP_vidSendTask</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app.o(i.APP_vidSendTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = APP_vidSendTask &rArr; ESP8266_Example &rArr; ESP8266_u8ConnectToHost &rArr; ESP8266_vidListen &rArr; UART_vidSetRxArr
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Example
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[65]"></a>APP_vidTempTask</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app.o(i.APP_vidTempTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_vidTempTask &rArr; SOIL_TEMP_vidStartReading
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_vidStartReading
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_u8ReadingStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOIL_TEMP_u16GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[66]"></a>APP_vidWaitTask</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app.o(i.APP_vidWaitTask))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidTask
</UL>

<P><STRONG><a name="[62]"></a>itoa</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app.o(i.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_vidSendTask
</UL>

<P><STRONG><a name="[3]"></a>dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.dummy))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>SCHEDULER_vidTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(i.SCHEDULER_vidTask))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.SCHEDULER_vidInit)
</UL>
<P><STRONG><a name="[6]"></a>dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.dummy))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
